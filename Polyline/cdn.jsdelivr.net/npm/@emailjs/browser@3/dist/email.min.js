(() => {
    "use strict";
    
    // Objeto para manejar la definición de módulos y exportación
    var e = {
      d: (t, r) => {
        for (var i in r)
          e.o(r, i) && !e.o(t, i) && Object.defineProperty(t, i, { enumerable: !0, get: r[i] });
      },
      o: (e, t) => Object.prototype.hasOwnProperty.call(e, t),
      r: (e) => {
        if (typeof Symbol !== "undefined" && Symbol.toStringTag) {
          Object.defineProperty(e, Symbol.toStringTag, { value: "Module" });
        }
        Object.defineProperty(e, "__esModule", { value: !0 });
      }
    };
  
    const t = {}; // Objeto donde se almacenarán las funciones exportadas
  
    e.r(t); // Marca el objeto t como un módulo
    e.d(t, { default: () => l, init: () => i, send: () => a, sendForm: () => d }); // Exporta las funciones del módulo
    
    // Configuración del origen de la API de EmailJS
    const r = { _origin: "https://api.emailjs.com" };
  
    // Función de inicialización de EmailJS (configura el user ID y origen de la API)
    const i = function (e) {
      let t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : "https://api.emailjs.com";
      r._userID = e; // Establece el User ID
      r._origin = t; // Establece el origen de la API (por defecto es el de EmailJS)
    };
  
    // Validación de parámetros necesarios para las peticiones (User ID, Service ID, Template ID)
    const s = (e, t, r) => {
      if (!e) throw "The public key is required. Visit https://dashboard.emailjs.com/admin/account";
      if (!t) throw "The service ID is required. Visit https://dashboard.emailjs.com/admin";
      if (!r) throw "The template ID is required. Visit https://dashboard.emailjs.com/admin/templates";
      return !0; // Si todo está bien, retorna true
    };
  
    // Clase para manejar la respuesta de la API de EmailJS (status y mensaje)
    class o {
      constructor(e) {
        this.status = e ? e.status : 0;
        this.text = e ? e.responseText : "Network Error"; // Si no hay respuesta, se asigna "Network Error"
      }
    }
  
    // Función para realizar una solicitud HTTP (POST) a la API de EmailJS
    const n = function (e, t) {
      let i = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : {}; // Cabeceras adicionales
      return new Promise((s, n) => {
        const a = new XMLHttpRequest(); // Crea un objeto XMLHttpRequest
        a.addEventListener("load", (e) => {
          let { target: t } = e; // Obtiene la respuesta del servidor
          const r = new o(t); // Crea una instancia de la clase 'o' con la respuesta
          if (r.status === 200 || r.text === "OK") {
            s(r); // Si todo está bien, resuelve la promesa con la respuesta
          } else {
            n(r); // Si hay error, rechaza la promesa
          }
        });
        a.addEventListener("error", (e) => {
          let { target: t } = e;
          n(new o(t)); // Si ocurre un error en la solicitud, rechaza la promesa
        });
        a.open("POST", r._origin + e, true); // Abre la solicitud POST
        Object.keys(i).forEach((e) => {
          a.setRequestHeader(e, i[e]); // Agrega las cabeceras necesarias
        });
        a.send(t); // Envía los datos a la API
      });
    };
  
    // Función para enviar un correo electrónico
    const a = (e, t, i, o) => {
      const a = o || r._userID; // Si no se pasa User ID, se usa el global
      s(a, e, t); // Valida los parámetros necesarios
      const d = {
        lib_version: "3.12.1", // Versión de la biblioteca
        user_id: a, // User ID
        service_id: e, // Service ID
        template_id: t, // Template ID
        template_params: i // Parámetros del template (datos del correo)
      };
      return n("/api/v1.0/email/send", JSON.stringify(d), { "Content-type": "application/json" }); // Envía la solicitud a la API
    };
  
    // Función para enviar un formulario como correo electrónico
    const d = (e, t, i, o) => {
      const a = o || r._userID; // Si no se pasa User ID, se usa el global
      const d = (e) => {
        let t;
        if (typeof e === "string") {
          t = document.querySelector(e); // Si el parámetro es un selector CSS, busca el formulario
        } else {
          t = e; // Si es el elemento del formulario directamente
        }
        if (!t || t.nodeName !== "FORM") {
          throw "The 3rd parameter is expected to be the HTML form element or the style selector of form"; // Valida que sea un formulario
        }
        return t;
      };
  
      s(a, e, t); // Valida los parámetros necesarios
      const l = new FormData(d(i)); // Crea un objeto FormData con los datos del formulario
      l.append("lib_version", "3.12.1"); // Agrega la versión de la biblioteca
      l.append("service_id", e); // Agrega el Service ID
      l.append("template_id", t); // Agrega el Template ID
      l.append("user_id", a); // Agrega el User ID
      
      return n("/api/v1.0/email/send-form", l); // Envía la solicitud para procesar el formulario
    };
  
    // Exportación de funciones para ser usadas fuera del módulo
    const l = { init: i, send: a, sendForm: d };
  
    // Asigna las funciones de EmailJS al objeto global 'self' (esto hace que estén disponibles globalmente)
    self.emailjs = t;
  })();
  